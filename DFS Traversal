void dfs(int root, vector<int>&visit, vector<int>&ans, vector<int> adj[])
{
    visit[root] =1;
    ans.push_back(root);

    for(auto it : adj[root])
    {
        if(!visit[it])
        {
            dfs(it, visit, ans, adj);
        }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<int>adj[V];

    for(int i = 0; i<V; i++)
    {
        adj[i].push_back(i);
    }

    for(int i = 0; i<edges.size(); i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }

    for(int i = 0; i< V; i++)
    {
        adj[i].begin(), adj[i].end();
    }

    vector<vector<int>>res;
    vector<int> visit(V);
    for(int i = 0; i < V; i++)
    {
        if(!visit[i])
        {
            vector<int>ans;
            dfs(i, visit, ans, adj);
            res.push_back(ans);
        }
    }

    return res;

}

bool isValidParenthesis(string expression)
{
    // Write your code here.
    stack<char> st;

    for(int i = 0; i < expression.length(); i++)
    {
        char ch = expression[i];

        if(ch == '(' or ch == '[' or ch == '{')
        {
            st.push(ch);
        }
        else
        {
          if (!st.empty()) {
            char top = st.top();

            if ((ch == ')' && top == '(') or (ch == ']' && top == '[') or
                (ch == '}' && top == '{')) {
              st.pop();
            } else {
              return false;
            }
          } else {
            return false;
          }
        }
    }

    if(st.empty())
    {
        return true;
    }
    else
    {
        return false;
    }// 20-feb-2023
}

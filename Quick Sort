#include <bits/stdc++.h> 
int partition(vector<int> &arr, int s, int e)
{
    int pivot = arr[s];
    int count = 0;

    for(int i = s+1; i<=e; i++)
    {
        if(arr[i] <= pivot) 
        count++;
    }
    int pivotindex = s + count;
    swap(arr[s],arr[pivotindex]);

    int i = s;
    int j = e;
    while(i<pivotindex && j > pivotindex)
    {
        while(arr[i] <= pivot) i++;
        while(arr[j] > pivot) j--;
        
        if(i<pivotindex && j > pivotindex)
        {
            swap(arr[i++],arr[j--]); 
        }
    }
    return pivotindex;
}

 void quicksort(vector<int> &arr, int s, int e)
 {
    //base case
    if(s>=e) return;
    
    int p = partition(arr,s,e);

    quicksort(arr,s,p-1);
    quicksort(arr,p+1,e);
 }

vector<int> quickSort(vector<int> arr)
{
    int n = arr.size();
    int s = 0;
    int e = n-1;
    quicksort(arr,s,e);
    return arr;
}
